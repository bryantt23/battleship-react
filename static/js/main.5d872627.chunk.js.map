{"version":3,"sources":["components/Player.js","components/Ship.js","components/Gameboard.js","components/GameEngine.js","components/BoardSection.js","App.js","reportWebVitals.js","index.js"],"names":["Player","name","this","gameBoard","size","getBoard","length","Math","floor","random","Ship","hitCount","sunk","Gameboard","boardSize","arr","i","push","Array","ships","every","ship","isSunk","j","attackedPositions","boardState","attackedBoard","undefined","hit","startingRow","startingCol","orientation","setShip","shipSizes","GameEngine","playerGameboard","round","shipSizesLen","getCoordinates","row","col","getOrientation","isValidShipPos","isValidShipPosition","placeShip","computerGameboard","player","computer","placeShips","BoardSection","message","color","props","attacked","status","isComputer","disabled","style","height","width","display","backgroundColor","onClick","updateBoardSectionState","Component","App","state","cheat","playerPositionsThatHaveBeenAttacked","computerPositionsThatHaveBeenAttacked","playerBoard","computerBoard","allShipsSunk","winner","isPlayerTurn","gameEngine","startGame","arr2","JSON","parse","stringify","setState","makePlay","isValidAttack","console","log","computerMove","board","attackedProperty","receiveAttack","updatedBoardState","updatedAttackBoard","dom","div","playerBoardUi","renderPlayerUi","computerBoardUi","renderComputerUi","computerBoardUiCheat","renderComputerUiCheat","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d872627.chunk.js","sourcesContent":["class Player {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n\r\n  makePlay(gameBoard) {\r\n    const size = gameBoard.getBoard().length;\r\n    const row = Math.floor(Math.random() * size);\r\n    const col = Math.floor(Math.random() * size);\r\n    return [row, col];\r\n  }\r\n}\r\n\r\nexport default Player;\r\n","class Ship {\r\n  constructor(length) {\r\n    this.length = length;\r\n    this.hitCount = 0;\r\n    this.sunk = false;\r\n  }\r\n\r\n  hit() {\r\n    this.hitCount++;\r\n    if (this.hitCount === this.length) {\r\n      this.sunk = true;\r\n    }\r\n  }\r\n\r\n  isSunk() {\r\n    return this.sunk;\r\n  }\r\n}\r\n\r\nexport default Ship;\r\n","class Gameboard {\r\n  constructor(boardSize) {\r\n    this.boardSize = boardSize;\r\n    let arr = [];\r\n    for (let i = 0; i < this.boardSize; i++) {\r\n      arr.push(new Array(this.boardSize));\r\n    }\r\n    this.gameBoard = arr;\r\n    this.ships = [];\r\n  }\r\n\r\n  allShipsSunk() {\r\n    return this.ships.every(ship => ship.isSunk());\r\n  }\r\n\r\n  getBoard() {\r\n    return this.gameBoard;\r\n  }\r\n\r\n  isValidAttack(i, j, attackedPositions) {\r\n    return !attackedPositions[i][j];\r\n  }\r\n\r\n  //try boolean to know if turn is over\r\n  receiveAttack(i, j, boardState, attackedBoard) {\r\n    if (boardState[i][j] === undefined) {\r\n      //miss\r\n      boardState[i][j] = 'MISS';\r\n    } else {\r\n      //hit\r\n      const ship = this.gameBoard[i][j];\r\n      ship.hit();\r\n      boardState[i][j] = 'HIT';\r\n    }\r\n    attackedBoard[i][j] = true;\r\n\r\n    return [boardState, attackedBoard];\r\n  }\r\n\r\n  setShip(startingRow, startingCol, orientation, ship) {\r\n    const { length } = ship;\r\n    if (orientation === 'vertical') {\r\n      for (let i = startingRow; i < startingRow + length; i++) {\r\n        this.gameBoard[i][startingCol] = ship;\r\n      }\r\n    } else {\r\n      //horizontal\r\n      for (let i = startingCol; i < startingCol + length; i++) {\r\n        this.gameBoard[startingRow][i] = ship;\r\n      }\r\n    }\r\n  }\r\n\r\n  placeShip(startingRow, startingCol, orientation, ship) {\r\n    this.setShip(startingRow, startingCol, orientation, ship);\r\n    this.ships.push(ship);\r\n  }\r\n\r\n  isValidShipPosition(startingRow, startingCol, orientation, ship) {\r\n    const { length } = ship;\r\n\r\n    if (orientation === 'vertical') {\r\n      if (startingRow + length > this.boardSize) {\r\n        return false;\r\n      }\r\n\r\n      for (let i = startingRow; i < startingRow + length; i++) {\r\n        if (this.gameBoard[i][startingCol] !== undefined) {\r\n          return false;\r\n        }\r\n      }\r\n    } else {\r\n      //horizontal\r\n      if (startingCol + length > this.boardSize) {\r\n        return false;\r\n      }\r\n\r\n      for (let i = startingCol; i < startingCol + length; i++) {\r\n        if (this.gameBoard[startingRow][i] !== undefined) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Gameboard;\r\n","import Player from './Player';\r\nimport Ship from './Ship';\r\nimport Gameboard from './Gameboard';\r\n\r\n//TODO move this into app and make that the gameengine\r\nconst shipSizes = [3, 4, 5];\r\n\r\nclass GameEngine {\r\n  player;\r\n  computer;\r\n  constructor() {}\r\n\r\n  getCoordinates() {\r\n    const size = this.playerGameboard.boardSize;\r\n    const row = Math.floor(Math.random() * size);\r\n    const col = Math.floor(Math.random() * size);\r\n    return [row, col];\r\n  }\r\n\r\n  getOrientation() {\r\n    return Math.round(Math.random()) === 0 ? 'horizontal' : 'vertical';\r\n  }\r\n\r\n  placeShips() {\r\n    const shipSizesLen = shipSizes.length;\r\n    let i = 0;\r\n\r\n    while (i < shipSizesLen) {\r\n      const ship = new Ship(shipSizes[i]);\r\n      let [row, col] = this.getCoordinates();\r\n      let orientation = this.getOrientation();\r\n      let isValidShipPos = this.playerGameboard.isValidShipPosition(\r\n        row,\r\n        col,\r\n        orientation,\r\n        ship\r\n      );\r\n      while (!isValidShipPos) {\r\n        [row, col] = this.getCoordinates();\r\n        orientation = this.getOrientation();\r\n        isValidShipPos = this.playerGameboard.isValidShipPosition(\r\n          row,\r\n          col,\r\n          orientation,\r\n          ship\r\n        );\r\n      }\r\n      this.playerGameboard.placeShip(row, col, orientation, ship);\r\n      i++;\r\n    }\r\n\r\n    i = 0;\r\n    while (i < shipSizesLen) {\r\n      const ship = new Ship(shipSizes[i]);\r\n      let [row, col] = this.getCoordinates();\r\n      let orientation = this.getOrientation();\r\n      let isValidShipPos = this.computerGameboard.isValidShipPosition(\r\n        row,\r\n        col,\r\n        orientation,\r\n        ship\r\n      );\r\n      while (!isValidShipPos) {\r\n        [row, col] = this.getCoordinates();\r\n        orientation = this.getOrientation();\r\n        isValidShipPos = this.computerGameboard.isValidShipPosition(\r\n          row,\r\n          col,\r\n          orientation,\r\n          ship\r\n        );\r\n      }\r\n      this.computerGameboard.placeShip(row, col, orientation, ship);\r\n      i++;\r\n    }\r\n  }\r\n\r\n  startGame() {\r\n    this.player = new Player('player');\r\n    this.computer = new Player('computer');\r\n    this.playerGameboard = new Gameboard(10);\r\n    this.computerGameboard = new Gameboard(10);\r\n    this.placeShips();\r\n\r\n    // console.log(this.playerGameboard.getBoard());\r\n  }\r\n}\r\n\r\nexport default GameEngine;\r\n","import React, { Component } from 'react';\r\n\r\nexport class BoardSection extends Component {\r\n  ///maybe deal with it differently based on player or computer board\r\n  render() {\r\n    const { attacked, status, isComputer } = this.props;\r\n    let message, color;\r\n    if (status === undefined || (!attacked && isComputer)) {\r\n      message = 'SEA';\r\n      color = 'blue';\r\n    } else if (typeof status === 'object') {\r\n      message = 'SHIP';\r\n      color = 'grey';\r\n    } else {\r\n      message = status; //should be a string\r\n      if (status === 'HIT') {\r\n        color = 'red';\r\n      } else {\r\n        color = 'green';\r\n      }\r\n    }\r\n\r\n    // console.log(message);\r\n    return (\r\n      <td\r\n        disabled={attacked}\r\n        style={{\r\n          height: 50,\r\n          width: 50,\r\n          display: 'inlineBlock',\r\n          backgroundColor: color\r\n        }}\r\n        onClick={() => {\r\n          // https:stackoverflow.com/questions/51549115/best-way-to-disabled-div-onclick-in-react\r\n          !attacked && this.props.updateBoardSectionState();\r\n        }}\r\n      >\r\n        {message}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardSection;\r\n","import { Component } from 'react';\r\nimport './App.css';\r\nimport GameEngine from './components/GameEngine';\r\nimport BoardSection from './components/BoardSection';\r\n\r\nclass App extends Component {\r\n  gameEngine;\r\n  playerBoard;\r\n  computerBoard;\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cheat: false,\r\n      playerPositionsThatHaveBeenAttacked: [],\r\n      computerPositionsThatHaveBeenAttacked: [],\r\n      playerBoard: [],\r\n      computerBoard: [],\r\n      allShipsSunk: false,\r\n      winner: null,\r\n      isPlayerTurn: true,\r\n      disabled: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.gameEngine = new GameEngine();\r\n    this.gameEngine.startGame();\r\n    this.playerBoard = this.gameEngine.playerGameboard;\r\n    this.computerBoard = this.gameEngine.computerGameboard;\r\n\r\n    const boardSize = this.gameEngine.playerGameboard.getBoard().length;\r\n\r\n    let arr = [];\r\n    for (let i = 0; i < boardSize; i++) {\r\n      arr.push(new Array(boardSize));\r\n    }\r\n    let arr2 = JSON.parse(JSON.stringify(arr));\r\n\r\n    this.setState({\r\n      playerBoard: [...this.gameEngine.playerGameboard.getBoard()],\r\n      computerBoard: [...this.gameEngine.computerGameboard.getBoard()],\r\n      playerPositionsThatHaveBeenAttacked: arr,\r\n      computerPositionsThatHaveBeenAttacked: arr2\r\n    });\r\n  }\r\n\r\n  computerMove() {\r\n    const [i, j] = this.gameEngine.computer.makePlay(this.playerBoard);\r\n\r\n    const attackedBoard = [...this.state.playerPositionsThatHaveBeenAttacked];\r\n\r\n    if (this.playerBoard.isValidAttack(i, j, attackedBoard)) {\r\n      this.updateBoardSectionState(i, j, 'playerBoard');\r\n    } else {\r\n      console.log('invalid computer move');\r\n      this.computerMove();\r\n    }\r\n  }\r\n\r\n  updateBoardSectionState(i, j, board) {\r\n    let attackedProperty;\r\n    if (board === 'playerBoard') {\r\n      attackedProperty = 'playerPositionsThatHaveBeenAttacked';\r\n    } else {\r\n      attackedProperty = 'computerPositionsThatHaveBeenAttacked';\r\n    }\r\n\r\n    const attackedBoard = this.state[attackedProperty];\r\n\r\n    if (this[board].isValidAttack(i, j, attackedBoard)) {\r\n      console.log('valid move');\r\n      const boardState = this.state[board];\r\n      const [updatedBoardState, updatedAttackBoard] = this[board].receiveAttack(\r\n        i,\r\n        j,\r\n        boardState,\r\n        attackedBoard\r\n      );\r\n\r\n      //use this & board to determine winner\r\n\r\n      console.log('all sunk', this[board].allShipsSunk());\r\n      const allShipsSunk = this[board].allShipsSunk();\r\n      if (allShipsSunk) {\r\n        let winner;\r\n        if (board === 'playerBoard') {\r\n          winner = 'Computer wins!';\r\n        } else {\r\n          winner = 'Player wins!';\r\n        }\r\n        this.setState({\r\n          allShipsSunk: true,\r\n          winner: winner,\r\n          disabled: true\r\n        });\r\n        return;\r\n      }\r\n\r\n      this.setState(\r\n        {\r\n          [attackedProperty]: updatedAttackBoard,\r\n          [board]: updatedBoardState,\r\n          isPlayerTurn: !this.state.isPlayerTurn\r\n        },\r\n        () => {\r\n          if (!this.state.isPlayerTurn) this.computerMove();\r\n        }\r\n      );\r\n    } else {\r\n      console.log('invalid move');\r\n    }\r\n  }\r\n\r\n  renderPlayerUi() {\r\n    const dom = [];\r\n    let length = this.state.playerBoard.length;\r\n    for (let i = 0; i < length; i++) {\r\n      let arr = [];\r\n      for (let j = 0; j < length; j++) {\r\n        arr.push(\r\n          //attacked, not attacked\r\n          //attacked can be hit or miss\r\n          //not attacked will just be the ship or sea\r\n          <BoardSection\r\n            attacked={this.state.playerPositionsThatHaveBeenAttacked[i][j]}\r\n            status={this.state.playerBoard[i][j]}\r\n            updateBoardSectionState={() => {}}\r\n          />\r\n        );\r\n      }\r\n      const div = <tr>{arr}</tr>;\r\n      dom.push(div);\r\n    }\r\n    console.log(dom);\r\n    return dom;\r\n  }\r\n\r\n  //basically same function as renderPlayerUi\r\n  renderComputerUi() {\r\n    const dom = [];\r\n    let length = this.state.computerBoard.length;\r\n    for (let i = 0; i < length; i++) {\r\n      let arr = [];\r\n      for (let j = 0; j < length; j++) {\r\n        arr.push(\r\n          <BoardSection\r\n            isComputer={true}\r\n            attacked={this.state.computerPositionsThatHaveBeenAttacked[i][j]}\r\n            status={this.state.computerBoard[i][j]}\r\n            updateBoardSectionState={() => {\r\n              this.updateBoardSectionState(i, j, 'computerBoard');\r\n            }}\r\n          />\r\n        );\r\n      }\r\n      const div = <tr>{arr}</tr>;\r\n      dom.push(div);\r\n    }\r\n    return dom;\r\n  }\r\n\r\n  renderComputerUiCheat() {\r\n    const dom = [];\r\n    let length = this.state.computerBoard.length;\r\n    for (let i = 0; i < length; i++) {\r\n      let arr = [];\r\n      for (let j = 0; j < length; j++) {\r\n        arr.push(\r\n          <BoardSection\r\n            status={this.state.computerBoard[i][j]}\r\n            updateBoardSectionState={() => {}}\r\n          />\r\n        );\r\n      }\r\n      const div = <tr>{arr}</tr>;\r\n      dom.push(div);\r\n    }\r\n    return dom;\r\n  }\r\n\r\n  render() {\r\n    const playerBoardUi = this.renderPlayerUi();\r\n    const computerBoardUi = this.renderComputerUi();\r\n    const computerBoardUiCheat = this.renderComputerUiCheat();\r\n\r\n    return (\r\n      <div className='App'>\r\n        <h1>Battleship</h1>\r\n        <div disabled={this.state.winner !== null} id='gameboard'>\r\n          <h3>Player Board</h3>\r\n          {playerBoardUi}\r\n          <h3>Computer Board</h3>\r\n          {computerBoardUi}\r\n          <br />\r\n        </div>\r\n        {this.state.disabled ? <h2>{this.state.winner}</h2> : ''}\r\n        <button\r\n          onClick={() => {\r\n            this.setState({ cheat: !this.state.cheat });\r\n          }}\r\n        >\r\n          {this.state.cheat ? 'Hide ' : 'Show '} computer's ships{' '}\r\n        </button>\r\n        {this.state.cheat && computerBoardUiCheat}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}